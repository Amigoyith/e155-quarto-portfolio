[
  {
    "objectID": "posts/first-post.html",
    "href": "posts/first-post.html",
    "title": "Posts Section",
    "section": "",
    "text": "Week 1 Reflection\nThis week in lab I had learned SystemVerilog programming on Lattice Radiant through basic case statements and also how to use QuestaSim and testbenches in debugging and verifying the codes give desired outcome (similar to C++’s test cases). In Lecture, I learned about what is propagation delay and contamination delay in flip-flop and also the setup time constrains and holdtime constraints. These are useful knowledge coming into digital design interview and working with synchronous clock system. In class, we also practiced in designing a finite state machine. Through the lab checkoff this week, I realized the harm of floating reset could cause whether the led works depends on luck. The course really trained me up in developing determination in achieveing all the lab’s goal.\nThe AI Prototype turns out to work better than I imagined. I put in some sample codes and the truth table of the XOR-AND into chat-GPT 4 free trial. It’s outputs did successfully synthesized on first try. instead of using the simple operators like ^ and & for XOR and AND relation, chat-GPT just write a combinational case statements for each line of the truth table. Moreover, it doesn’t realized using a low-speed oscillator can make a 2.4 Hz blinking. Instead it kept the HSOSC module from sample code and says for reset (if counter &gt;= 10000000 begin) slow_clk &lt;= ~slow_clk; I’m not entirely sure what it means by slow_clk as there is almost no useful comments on the Chat-GPT code. There is also no reset.\n‌"
  },
  {
    "objectID": "labs/lab2/lab2.html",
    "href": "labs/lab2/lab2.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Introduction \nLab 2 is a continuation based on Lab 1’s work on a seven-segment display but instead of using a single display, we are using a dual display. The challenge lies in still using the same amount of I/O pins so we have to implement a time-multiplexing scheme. Time-multiplexing is a useful computer technique for data transmission, resource allocation, and reducing bandwidth. We are also learning how to use the FPGA Lattice manual to find operating conditions that would assist us in circuit building. \nDesign and Testing Methodology Wiring According to the iCE40UP Data sheet on page 34, the maximum current that can be drawn from the I/O pins is 8mA and the voltage drop for the PNP transistor is 0.7V. Using Ohm’s Law V=IR without V input being 3.3V, we would need to use a resistor that at least has: (3.3V-0.7V)/0.008A = 325 ohms. The closest upper-bounded one would be the 330 ohms resistor. I chose a 1k resistor just to be safe. For the LEDs, the resistor needs to have: (3.3V-2V)/0.02A = 65 ohms (see Lab 1 for details) and the closest choice is the 68 ohms resistor. We choose to use 2N3906 PNP transistors to drive large enough currents toward the anode pins of the dual display with an emitter on 3.3Vcpp and collector to the anode and base to the GPIO pins.  Software When developing the SystemVerilog module for this lab, I thought of reusing the independent seven-segment display module from lab 1 that contains all the combinational case statements for each switch combination. I have a freq_switch that basically toggles at a certain frequency determined by the counter and is later used to determine the status of the anode that declares which digits are on or off (only one can be on at the time). The sum is gotten by just performing binary summation on the two inputs s1 and s2. I used a high-speed oscillator that has a 24MHz frequency and a 12 bits counter so that my resulting flickering frequency would be: 24*10^6 / (2^12) = 5859 Hz which is more than enough for human eyes not to catch any lagging.\nTechnical Documentation The following is the final schematic of the circuit.  The following is the block diagram for the structures of FPGA modules.  \nResults and Discussion I wrote a testbench that didn’t cover all the cases but covers possible types of cases and edge cases of two same inputs, two different inputs. The format of testvectors is:input1_input2_anode_seg_sum. \nAs shown by the testbenches and uploading design onto the board to physically test out all possible combinations, the project at least achieved the goal of this lab 2 to display two digits simultaneously.  \nHowever, the organization and naming of the program is rather messy and seems to contain many unused variables and the names of variables didn’t capture the essence of it’s function (i.e. reset is actual not reset and anode is just the object name which could be confusing to know it’s funciton in the future). I started to get accustomed to the modular design appraoch of FPGA but still needs to force myself to practice more on it like separating MUX into it’s own module and only use clk in the top modular level. The testbenches could also needs some rework in adding more cases and test the clock cycles with the change of anode control separately from the summation. \nConclusion This marks the preliminary success of lab2, I spent 20 hours on this lab."
  },
  {
    "objectID": "labs/lab2/lab2.html#lab-2-multiplexed-7-segment-display",
    "href": "labs/lab2/lab2.html#lab-2-multiplexed-7-segment-display",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Introduction \nLab 2 is a continuation based on Lab 1’s work on a seven-segment display but instead of using a single display, we are using a dual display. The challenge lies in still using the same amount of I/O pins so we have to implement a time-multiplexing scheme. Time-multiplexing is a useful computer technique for data transmission, resource allocation, and reducing bandwidth. We are also learning how to use the FPGA Lattice manual to find operating conditions that would assist us in circuit building. \nDesign and Testing Methodology Wiring According to the iCE40UP Data sheet on page 34, the maximum current that can be drawn from the I/O pins is 8mA and the voltage drop for the PNP transistor is 0.7V. Using Ohm’s Law V=IR without V input being 3.3V, we would need to use a resistor that at least has: (3.3V-0.7V)/0.008A = 325 ohms. The closest upper-bounded one would be the 330 ohms resistor. I chose a 1k resistor just to be safe. For the LEDs, the resistor needs to have: (3.3V-2V)/0.02A = 65 ohms (see Lab 1 for details) and the closest choice is the 68 ohms resistor. We choose to use 2N3906 PNP transistors to drive large enough currents toward the anode pins of the dual display with an emitter on 3.3Vcpp and collector to the anode and base to the GPIO pins.  Software When developing the SystemVerilog module for this lab, I thought of reusing the independent seven-segment display module from lab 1 that contains all the combinational case statements for each switch combination. I have a freq_switch that basically toggles at a certain frequency determined by the counter and is later used to determine the status of the anode that declares which digits are on or off (only one can be on at the time). The sum is gotten by just performing binary summation on the two inputs s1 and s2. I used a high-speed oscillator that has a 24MHz frequency and a 12 bits counter so that my resulting flickering frequency would be: 24*10^6 / (2^12) = 5859 Hz which is more than enough for human eyes not to catch any lagging.\nTechnical Documentation The following is the final schematic of the circuit.  The following is the block diagram for the structures of FPGA modules.  \nResults and Discussion I wrote a testbench that didn’t cover all the cases but covers possible types of cases and edge cases of two same inputs, two different inputs. The format of testvectors is:input1_input2_anode_seg_sum. \nAs shown by the testbenches and uploading design onto the board to physically test out all possible combinations, the project at least achieved the goal of this lab 2 to display two digits simultaneously.  \nHowever, the organization and naming of the program is rather messy and seems to contain many unused variables and the names of variables didn’t capture the essence of it’s function (i.e. reset is actual not reset and anode is just the object name which could be confusing to know it’s funciton in the future). I started to get accustomed to the modular design appraoch of FPGA but still needs to force myself to practice more on it like separating MUX into it’s own module and only use clk in the top modular level. The testbenches could also needs some rework in adding more cases and test the clock cycles with the change of anode control separately from the summation. \nConclusion This marks the preliminary success of lab2, I spent 20 hours on this lab."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Xiyuan Liu (Amy) is a Junior Undergraduate Student at Harvey Mudd College majoring in Engineering with the concentration on computer and electric engineering. Her career interests are in the field of embeded systems and automation. In her free time, she enjoys making digital arts and watching animes. If you have any questions or suggestion regarding contents of this site, feel free to contact me through this email: amyliu01@g.hmc.edu."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "E155 Blog",
    "section": "",
    "text": "Posts Section\n\n\n\n\n\n\n\n\n\n\n\nSep 6, 2024\n\n\nAmy Liu\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "labs/lab1/lab1.html",
    "href": "labs/lab1/lab1.html",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Introduction The main goal of this assignment is to learn SMD in board assembly and learn how to use Lattice Radiant to write basic combinational System Verilog codes. By the end of this week’s lab, I hope I can learn how to write Verilog code to test out the hardware on board, perform logic simulations in Radiant, and deepen my understanding of circuit debugging. We are going to use on-board led to test the FPGA and also construct a functional hexadecimal 7-segment display.\nDesign Approach In the case of testing the board, the lab manual suggested implementing a XOR and AND relationship for the ON/OFF status of two led while letting the third led shine at 2.4 Hz. I used low speed oscillators with 10k Hz and counter [11:0] so that 10k/2^12 = 2.44Hz. I also included a reset to make sure the simulation works correctly and we are not starting at a random value every time. When working with the seven segment display, it’s good to use combinational logic to make case statements for each combination of 4 binary switches. I draw out the diagram for a seven segment display and assign seg[0] to be the segment a, seg[1] to be segment b according to the ascending order and assign free pins under FPGA for later breadboard testing. Here is the block diagram of the top module:  In order to provide 5-20mA of currents towards the segment LED, I choose to use a resistor of 68 ohms so that using ohm’s law(V=iR): I = (Vcc-Vf)/R = (3.3V-2.1V)/68 ohms =0.017A which is within the range of acceptable current. Here is the schematics for the circuit of 7 segment display: \nTesting Approach To make sure the design works as expected, I tested both through hardware breadboarding onto an actual 7 segment display led and also used QuestaSim inside Lattice Radiant. I ran through all possible combinations of 4 binary switches to ensure no edge cases are left.\nThis is picture for the output successful runthrough of testbenches: Seven-segment display \nXOR_AND \nConclusion The design meets all the requirements that we can alternate between 0-9 and A-F through controlling the four on-off switches. This is a picture of the board displaying on the letter F: \nNumber of hours spent: 18 hrs."
  },
  {
    "objectID": "labs/lab1/lab1.html#lab-1fpga-and-mcu-setup-and-testing",
    "href": "labs/lab1/lab1.html#lab-1fpga-and-mcu-setup-and-testing",
    "title": "E155 Portfolio",
    "section": "",
    "text": "Introduction The main goal of this assignment is to learn SMD in board assembly and learn how to use Lattice Radiant to write basic combinational System Verilog codes. By the end of this week’s lab, I hope I can learn how to write Verilog code to test out the hardware on board, perform logic simulations in Radiant, and deepen my understanding of circuit debugging. We are going to use on-board led to test the FPGA and also construct a functional hexadecimal 7-segment display.\nDesign Approach In the case of testing the board, the lab manual suggested implementing a XOR and AND relationship for the ON/OFF status of two led while letting the third led shine at 2.4 Hz. I used low speed oscillators with 10k Hz and counter [11:0] so that 10k/2^12 = 2.44Hz. I also included a reset to make sure the simulation works correctly and we are not starting at a random value every time. When working with the seven segment display, it’s good to use combinational logic to make case statements for each combination of 4 binary switches. I draw out the diagram for a seven segment display and assign seg[0] to be the segment a, seg[1] to be segment b according to the ascending order and assign free pins under FPGA for later breadboard testing. Here is the block diagram of the top module:  In order to provide 5-20mA of currents towards the segment LED, I choose to use a resistor of 68 ohms so that using ohm’s law(V=iR): I = (Vcc-Vf)/R = (3.3V-2.1V)/68 ohms =0.017A which is within the range of acceptable current. Here is the schematics for the circuit of 7 segment display: \nTesting Approach To make sure the design works as expected, I tested both through hardware breadboarding onto an actual 7 segment display led and also used QuestaSim inside Lattice Radiant. I ran through all possible combinations of 4 binary switches to ensure no edge cases are left.\nThis is picture for the output successful runthrough of testbenches: Seven-segment display \nXOR_AND \nConclusion The design meets all the requirements that we can alternate between 0-9 and A-F through controlling the four on-off switches. This is a picture of the board displaying on the letter F: \nNumber of hours spent: 18 hrs."
  }
]