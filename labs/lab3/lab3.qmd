## Lab 3: Keypad Scanner

### Introduction<br>
This lab is an extension of previous labs using seven-segment display to show the reading of a matirx keypad. We would still use the time-multiplexing techniques in lab2 in addition to learn how to use FPGA to scan inputs from a keypad. We want to make sure no accidental short presses are recorded and display the two hexadecimal digits on the dual seven-segment display. Here is my [github](https://github.com/Amigoyith/e155-lab3/tree/main) for this lab.<br>

### Design Choice<br>

**Hardware**<br>
The circuit design is mostly similar to that of lab2 except for the new interface of a 4x4 matrix keypad connecting to the reading and scanning pins. I used pull-up resistor that all columns are HIGH at the beginning. 
In the logic for scanning the keypad (always_comb block), the rows are driven with one low bit and the rest high (4'b0111, 4'b1011, etc.). This is a common practice when scanning a keypad using a pull-up resistor configuration.
Here is my schematics:
![](images\3sche.jpg)

**Module Relationships**<br>
The key modules I implemented are:
The scanner_FSM that scan the incoming column signal and determine whether the pressed occured and then output signals to the row pins of the keypad along with decoder to record the active_row of the pressed key. The decoder translates the hexadecimal number based on the rows and columns and sent to the storage_ctrl module which would manage the most recent and second most recent value pressed. At the end, the display module would display the two digits given by the storage_ctrl module.
Here is my block diagram:
![](images\lab3blockdiagram.jpg)

**Debounce**<br>
The debounce strategy I choose to implement is based upon a counter (*debounce_counter*) and limitation time (*DEBOUNCE_TIME*) in order to make sure the noise from the hardware are not registered to results in incorrect display. The debounce_counter would basically increments 1 every clock cycle until reaching the desired clock cycles to transition to the PRESS states, else we would stay at the debounce state or if key is released, we transfer back to the SCAN states. The advantage of this mehod is it's accuracy in filtering out nose from the mechanical keys and gives flexibility by changing the DEBOUNCE_TIME to reflect for other kinds of switches or noise that may require fast or slower debounce time. However, the tradeoffs is there is a little delay in the display of digits as we need to have the debounce_counter to reach the DEBOUNCE TIME. Other possible methods could be implementing debounce on the hardware directly using a RC filter to only allow certain signals to pass through. This methods is quicker in response and also doesn't take up any digital resources for making the debounce, the tradeoff would be we can't adjust the filter as easy as the DEBOUNCE_TIME so we need to recalculate for the resistors and capcitors values each time for change in debounce requirements.<br>
![](images\fsmscanner.jpg)<br>
![](images\fsmscannertable.jpg)<br>

**Digit Storage**<br>
My storage_ctrl module used a simple two-register buffer (*dig0ï¼Œdig1*) to control the storage of the last two recent presses on the keypad to be displayed where the most recent dig0 is on the right and the second most recent dig1 is on the left. This design is simple to implement and as it's a separate module from the scanner module fsm, the modularization makes debugging process easier and has a less complicated (less states at least) fsm. This module can also later be used for other design purpose if needed. <br>
![](images\lab3storage.jpg)<br>

**Scanning and Detecting**<br>
I detect te rising edge of the key_pressed sgnal using the *last_key* meaning the digits would showup on the 7-segment display whenever the press happens. This helps me to achieve the goal of only register press once and during hold down, not register other presses nor repeating the register of the same digit being held down on the keypad. Another design choice is let the system respond to the key_pressed signals so that the display shows up upon the release of keys. The tradeoffs there however is higher response time of the display and doesn't make intuitive to normal typing behaviors of people. For scanning, I choose to scan rows. Scanning columns would work basically the same. I could attempt parallel scanning but that's over complicated for the purpose of the lab.
![](images\fsmscanrows.jpg)<br>
![](images\fsmrowscanntable.jpg)<br>

### Testing and Simulations<br>
I used ModelSim on Radiant to simulate the possible scenarios of user pressing and check if the output meets expectation. The following is my testbench results for the top module and all modules without synchronizer. We can see that if the consecutive different presses occurred together within a short time period, the detected digits remains to tbe the first digit pressed and if the press last too short before released, key_pressed is not activated.
![](images\testbenchtop.jpg)<br>
This is modules without synchronizer, it have similar behavior and did debouncing correctly only that it's adjusted for a two-clock cycle delay for the asynchronous output.
![](images\testbenchwithoutsyncindividual.jpg)<br>

### Conclusion<br>
I spent around 41 hours on this lab to get a working scanner meeting all expectations. Most of the time are spent are the integration of debounce state and investigating clock used by different modules.
If I were to do this lab again, I would use oscilloscope at early stage to see wether each state are triggered at the right time and condition rather than relying on the correctness of testbenches. 